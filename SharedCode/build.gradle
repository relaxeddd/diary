apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.squareup.sqldelight'
apply plugin: 'com.android.library'
//apply plugin: 'org.jetbrains.kotlin.native.cocoapods'

android {
    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName '0.1'
    }

    // By default the android gradle plugin expects to find the kotlin source files in
    // the folder `main` and the test in the folder `test`. This is to be able place
    // the source code files inside androidMain and androidTest folders
    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
            java.srcDirs = ['src/androidMain/kotlin']
            res.srcDirs = ['src/androidMain/res']
        }
        /*test {
            java.srcDirs = ['src/androidTest/kotlin']
            res.srcDirs = ['src/androidTest/res']
        }*/
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}

kotlin {
    //select iOS target platform depending on the Xcode environment variables
    /*val iOSTarget: (String, KotlinNativeTarget.() -> Unit) -> KotlinNativeTarget =
        if (System.getenv("SDK_NAME")?.startsWith("iphoneos") == true)
            ::iosArm64
        else
            ::iosX64

    iOSTarget("ios") {
        binaries {
            framework {
                baseName = "SharedCode"
            }
        }
    }

    jvm("android")*/

    targets {
        fromPreset(presets.android, 'android')

        // iPhone simulator    : presets.iosX64
        // real iDevice 32 bit : presets.iosArm32
        // real iDevice 64 bit : presets.iosArm64
        def iosPreset = presets.iosX64

        fromPreset(iosPreset, 'ios') {
            binaries {
                framework {
                    // Disable bitcode embedding for the simulator build.
                    if (iosPreset == presets.iosX64) {
                        embedBitcode("disable")
                    }
                }
            }
            //compilations.main.outputKinds('FRAMEWORK')
            //compilations.main.linkerOpts '-rpath @loader_path/Frameworks'
            compilations.each {
                //it.extraOpts("-output-kinds", "FRAMEWORK")
                it.extraOpts("-linker-options", "-lsqlite3")
            }
        }
    }

    sourceSets {
        commonMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-common'

            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutine_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serializer_version"
            implementation "io.ktor:ktor-client-core:$ktor_version"

            implementation "dev.icerock.moko:mvvm:$moko_mvvm_version"
            implementation "org.kodein.di:kodein-di-core:$kodeinVersion"
            implementation "org.kodein.di:kodein-di-erased:$kodeinVersion"
        }

        androidMain.dependencies {
            //api 'org.jetbrains.kotlin:kotlin-stdlib'
            implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serializer_version"
            implementation "io.ktor:ktor-client-android:$ktor_version"
            implementation "com.squareup.sqldelight:android-driver:$sqldelight_version"

            implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
        }

        iosMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutine_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serializer_version"
            implementation "io.ktor:ktor-client-ios:$ktor_version"
            implementation "com.squareup.sqldelight:ios-driver:$sqldelight_version"
        }
    }
}

task packForXCode {
//    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
//    dependsOn "link${buildType.toLowerCase().capitalize()}FrameworkIos"
//    //dependsOn "linkMainDebugFrameworkIOS"
//
//    doLast {
//        def srcFile = kotlin.targets.ios.binaries.getFramework(buildType).outputFile
//        def targetDir = getProperty("configuration.build.dir")
//        copy {
//            from srcFile.parent
//            into targetDir
//            include 'SharedCode.framework/**'
//            include 'SharedCode .framework.dSYM'
//        }
//    }

    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    dependsOn("link${buildType.toLowerCase().capitalize()}FrameworkIos")
    //dependsOn kotlin.targets.ios.binaries.getFramework(buildType).linkTask

    doLast {
        def srcFile = kotlin.targets.ios.binaries.getFramework(buildType).outputFile
        def targetDir = project.property('configuration.build.dir')
        copy {
            from srcFile.parent
            into targetDir
//            into("/"){
//                from { srcFile.parent }
//            }
//            into("/${project.name}.framework/Frameworks/SharedCode.framework") {
//                from srcFile.parent
//            }
            include 'SharedCode.framework/**'
            include 'SharedCode.framework.dSYM'
        }
    }
}

tasks.build.dependsOn packForXCode

sqldelight {
    Database {
        packageName = "relaxeddd.simplediary"
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

//task packForXCode(type: Sync) {
//    final File frameworkDir = new File(buildDir, "xcode-frameworks")
//    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
//    final def framework = kotlin.targets.iOS.binaries.getFramework("SharedCode", mode)
//
//    inputs.property "mode", mode
//    dependsOn framework.linkTask
//
//    from { framework.outputFile.parentFile }
//    into frameworkDir
//
//    doLast {
//        new File(frameworkDir, 'gradlew').with {
//            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
//            setExecutable(true)
//        }
//    }
//}
//tasks.build.dependsOn packForXCode

/*val packForXcode by tasks.creating(Sync::class) {
    val targetDir = File(buildDir, "xcode-frameworks")

    /// selecting the right configuration for the iOS
    /// framework depending on the environment
    /// variables set by Xcode build
    val mode = System.getenv("CONFIGURATION") ?: "DEBUG"
    val framework = kotlin.targets
        .getByName<KotlinNativeTarget>("ios")
        .binaries.getFramework(mode)
    inputs.property("mode", mode)
    dependsOn(framework.linkTask)

    from({ framework.outputDirectory })
    into(targetDir)

    /// generate a helpful ./gradlew wrapper with embedded Java path
    doLast {
        val gradlew = File(targetDir, "gradlew")
        gradlew.writeText("#!/bin/bash\n"
                + "export 'JAVA_HOME=${System.getProperty("java.home")}'\n"
                + "cd '${rootProject.rootDir}'\n"
                + "./gradlew \$@\n")
        gradlew.setExecutable(true)
    }
}

tasks.getByName("build").dependsOn(packForXcode)*/