apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.squareup.sqldelight'
apply plugin: 'com.android.library'
//apply plugin: 'org.jetbrains.kotlin.native.cocoapods'

android {
    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName '0.1'
    }

    // By default the android gradle plugin expects to find the kotlin source files in
    // the folder `main` and the test in the folder `test`. This is to be able place
    // the source code files inside androidMain and androidTest folders
    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
            java.srcDirs = ['src/androidMain/kotlin']
            res.srcDirs = ['src/androidMain/res']
        }
        /*test {
            java.srcDirs = ['src/androidTest/kotlin']
            res.srcDirs = ['src/androidTest/res']
        }*/
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}

kotlin {

    targets {
        fromPreset(presets.android, 'android')

        // iPhone simulator    : presets.iosX64
        // real iDevice 32 bit : presets.iosArm32
        // real iDevice 64 bit : presets.iosArm64
        def iosPreset = presets.iosArm64

        fromPreset(iosPreset, 'ios') {
            binaries {
                framework {
                    // Disable bitcode embedding for the simulator build.
                    if (iosPreset == presets.iosX64) {
                        embedBitcode("disable")
                    }
                }
            }
            compilations.each {
                //it.extraOpts("-linker-options", "-lsqlite3")
            }
        }
    }

    sourceSets {
        all {
            languageSettings.useExperimentalAnnotation("org.mylibrary.OptInAnnotation")
        }
        commonMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-common'

            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutine_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serializer_version"

            implementation "dev.icerock.moko:mvvm:$moko_mvvm_version"
        }

        androidMain.dependencies {
            //api 'org.jetbrains.kotlin:kotlin-stdlib'
            implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serializer_version"
            implementation "com.squareup.sqldelight:android-driver:$sqldelight_version"

            implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
        }

        iosMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutine_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serializer_version"
            implementation "com.squareup.sqldelight:native-driver:$sqldelight_version"
        }
    }
}

sqldelight {
    Database {
        packageName = "relaxeddd.simplediary"
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    def srcFile = kotlin.targets.ios.binaries.getFramework('DEBUG')

    inputs.property "mode", mode
    dependsOn srcFile.linkTask

    from { srcFile.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXCode
